// Code generated by Kitex v0.14.1. DO NOT EDIT.

package core_api

import (
	"github.com/xh-polaris/innospark-idl/kitex_gen/basic"

	"github.com/cloudwego/prutal"
)

// 单条消息
type Message struct {
	Content     string   `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"` // 消息内容, json字符串, 存放在text中
	ContentType int32    `protobuf:"varint,2,opt,name=contentType" json:"contentType,omitempty"`
	Attaches    []string `protobuf:"bytes,3,rep,name=attaches" json:"attaches,omitempty"`
	References  []string `protobuf:"bytes,4,rep,name=references" json:"references,omitempty"`
}

func (x *Message) Reset() { *x = Message{} }

func (x *Message) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Message) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *Message) GetAttaches() []string {
	if x != nil {
		return x.Attaches
	}
	return nil
}

func (x *Message) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

// 对话配置
type CompletionOption struct {
	IsRegen                bool `protobuf:"varint,1,opt,name=isRegen" json:"isRegen,omitempty"`                               // 是否重新生成
	WithSuggest            bool `protobuf:"varint,2,opt,name=withSuggest" json:"withSuggest,omitempty"`                       // 是否生成建议
	NeedCreateConversation bool `protobuf:"varint,3,opt,name=needCreateConversation" json:"needCreateConversation,omitempty"` // 是否需要创建新对话
	IsReplace              bool `protobuf:"varint,4,opt,name=isReplace" json:"isReplace,omitempty"`                           // 是否替换
	IsDelete               bool `protobuf:"varint,5,opt,name=isDelete" json:"isDelete,omitempty"`                             // 是否删除
	UseDeepThink           bool `protobuf:"varint,6,opt,name=useDeepThink" json:"useDeepThink,omitempty"`                     // 是否深度思考
}

func (x *CompletionOption) Reset() { *x = CompletionOption{} }

func (x *CompletionOption) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CompletionOption) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CompletionOption) GetIsRegen() bool {
	if x != nil {
		return x.IsRegen
	}
	return false
}

func (x *CompletionOption) GetWithSuggest() bool {
	if x != nil {
		return x.WithSuggest
	}
	return false
}

func (x *CompletionOption) GetNeedCreateConversation() bool {
	if x != nil {
		return x.NeedCreateConversation
	}
	return false
}

func (x *CompletionOption) GetIsReplace() bool {
	if x != nil {
		return x.IsReplace
	}
	return false
}

func (x *CompletionOption) GetIsDelete() bool {
	if x != nil {
		return x.IsDelete
	}
	return false
}

func (x *CompletionOption) GetUseDeepThink() bool {
	if x != nil {
		return x.UseDeepThink
	}
	return false
}

// SSEEvent
type SSEEvent struct {
	EventData string `protobuf:"bytes,1,opt,name=eventData" json:"eventData,omitempty"`  // 事件数据
	EventId   int32  `protobuf:"varint,2,opt,name=eventId" json:"eventId,omitempty"`     // 事件id
	EventType int32  `protobuf:"varint,3,opt,name=eventType" json:"eventType,omitempty"` // 事件类型
}

func (x *SSEEvent) Reset() { *x = SSEEvent{} }

func (x *SSEEvent) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SSEEvent) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SSEEvent) GetEventData() string {
	if x != nil {
		return x.EventData
	}
	return ""
}

func (x *SSEEvent) GetEventId() int32 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *SSEEvent) GetEventType() int32 {
	if x != nil {
		return x.EventType
	}
	return 0
}

// 消息元数据
type EventMeta struct {
	MessageId        string `protobuf:"bytes,1,opt,name=messageId" json:"messageId,omitempty"`                // 消息id
	LocalMessageId   string `protobuf:"bytes,2,opt,name=localMessageId" json:"localMessageId,omitempty"`      // 本地消息id
	ConversationId   string `protobuf:"bytes,3,opt,name=conversationId" json:"conversationId,omitempty"`      // 对话id
	SectionId        string `protobuf:"bytes,4,opt,name=sectionId" json:"sectionId,omitempty"`                // 段id
	MessageIndex     int32  `protobuf:"varint,5,opt,name=messageIndex" json:"messageIndex,omitempty"`         // 消息索引
	ConversationType int32  `protobuf:"varint,6,opt,name=conversationType" json:"conversationType,omitempty"` // 对话类型
}

func (x *EventMeta) Reset() { *x = EventMeta{} }

func (x *EventMeta) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventMeta) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventMeta) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *EventMeta) GetLocalMessageId() string {
	if x != nil {
		return x.LocalMessageId
	}
	return ""
}

func (x *EventMeta) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *EventMeta) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *EventMeta) GetMessageIndex() int32 {
	if x != nil {
		return x.MessageIndex
	}
	return 0
}

func (x *EventMeta) GetConversationType() int32 {
	if x != nil {
		return x.ConversationType
	}
	return 0
}

// 模型信息
type EventModel struct {
	BotId   string `protobuf:"bytes,1,opt,name=botId" json:"botId,omitempty"`     // 模型id
	BotName string `protobuf:"bytes,2,opt,name=botName" json:"botName,omitempty"` // 模型名称
}

func (x *EventModel) Reset() { *x = EventModel{} }

func (x *EventModel) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventModel) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventModel) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *EventModel) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

// 模型内容
type EventChat struct {
	Message          *EventChat_Message `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`                    // 消息内容
	MessageId        string             `protobuf:"bytes,2,opt,name=messageId" json:"messageId,omitempty"`                // 消息id
	LocalMessageId   string             `protobuf:"bytes,3,opt,name=localMessageId" json:"localMessageId,omitempty"`      // 本地消息id
	ConversationId   string             `protobuf:"bytes,4,opt,name=conversationId" json:"conversationId,omitempty"`      // 对话id
	SectionId        string             `protobuf:"bytes,5,opt,name=sectionId" json:"sectionId,omitempty"`                // 段id
	ReplyId          string             `protobuf:"bytes,6,opt,name=replyId" json:"replyId,omitempty"`                    // 回复id
	IsDelta          bool               `protobuf:"varint,7,opt,name=isDelta" json:"isDelta,omitempty"`                   // 是否增量
	Status           int32              `protobuf:"varint,8,opt,name=status" json:"status,omitempty"`                     // 状态
	InputContentType int32              `protobuf:"varint,9,opt,name=inputContentType" json:"inputContentType,omitempty"` // 输入内容类型
	MessageIndex     int32              `protobuf:"varint,10,opt,name=messageIndex" json:"messageIndex,omitempty"`        // 消息索引
	BotId            string             `protobuf:"bytes,11,opt,name=botId" json:"botId,omitempty"`                       // 模型id
}

func (x *EventChat) Reset() { *x = EventChat{} }

func (x *EventChat) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventChat) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventChat) GetMessage() *EventChat_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EventChat) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *EventChat) GetLocalMessageId() string {
	if x != nil {
		return x.LocalMessageId
	}
	return ""
}

func (x *EventChat) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *EventChat) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *EventChat) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *EventChat) GetIsDelta() bool {
	if x != nil {
		return x.IsDelta
	}
	return false
}

func (x *EventChat) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *EventChat) GetInputContentType() int32 {
	if x != nil {
		return x.InputContentType
	}
	return 0
}

func (x *EventChat) GetMessageIndex() int32 {
	if x != nil {
		return x.MessageIndex
	}
	return 0
}

func (x *EventChat) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

type EventChat_Message struct {
	// 模型增量返回的简要消息
	Content     string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	ContentType int32  `protobuf:"varint,2,opt,name=contentType" json:"contentType,omitempty"`
}

func (x *EventChat_Message) Reset() { *x = EventChat_Message{} }

func (x *EventChat_Message) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventChat_Message) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *EventChat_Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EventChat_Message) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

// 结束
type EventEnd struct {
}

func (x *EventEnd) Reset() { *x = EventEnd{} }

func (x *EventEnd) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *EventEnd) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// 模型对话请求
type CompletionReq struct {
	Messages         []*Message        `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`                 // 用户输入消息, 长度应为1
	CompletionOption *CompletionOption `protobuf:"bytes,2,opt,name=completionOption" json:"completionOption,omitempty"` // 对话配置
	BotId            string            `protobuf:"bytes,3,opt,name=botId" json:"botId,omitempty"`                       // 使用的模型id
	ConversationId   string            `protobuf:"bytes,4,opt,name=conversationId" json:"conversationId,omitempty"`     // 对话id
	LocalMessageId   string            `protobuf:"bytes,5,opt,name=localMessageId" json:"localMessageId,omitempty"`     // 本地消息id
}

func (x *CompletionReq) Reset() { *x = CompletionReq{} }

func (x *CompletionReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CompletionReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CompletionReq) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CompletionReq) GetCompletionOption() *CompletionOption {
	if x != nil {
		return x.CompletionOption
	}
	return nil
}

func (x *CompletionReq) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *CompletionReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *CompletionReq) GetLocalMessageId() string {
	if x != nil {
		return x.LocalMessageId
	}
	return ""
}

// 获取历史记录请求
type ListHistoryReq struct {
	Page *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (x *ListHistoryReq) Reset() { *x = ListHistoryReq{} }

func (x *ListHistoryReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListHistoryReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListHistoryReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListHistoryResp struct {
	Response *basic.Response            `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
	History  []*ListHistoryResp_HisItem `protobuf:"bytes,2,rep,name=history" json:"history,omitempty"`
}

func (x *ListHistoryResp) Reset() { *x = ListHistoryResp{} }

func (x *ListHistoryResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListHistoryResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListHistoryResp) GetResponse() *basic.Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ListHistoryResp) GetHistory() []*ListHistoryResp_HisItem {
	if x != nil {
		return x.History
	}
	return nil
}

type ListHistoryResp_HisItem struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
	Brief          string `protobuf:"bytes,2,opt,name=brief" json:"brief,omitempty"`
	CreateTime     int64  `protobuf:"varint,3,opt,name=createTime" json:"createTime,omitempty"`
	UpdateTime     int64  `protobuf:"varint,4,opt,name=updateTime" json:"updateTime,omitempty"`
}

func (x *ListHistoryResp_HisItem) Reset() { *x = ListHistoryResp_HisItem{} }

func (x *ListHistoryResp_HisItem) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ListHistoryResp_HisItem) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListHistoryResp_HisItem) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ListHistoryResp_HisItem) GetBrief() string {
	if x != nil {
		return x.Brief
	}
	return ""
}

func (x *ListHistoryResp_HisItem) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *ListHistoryResp_HisItem) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

// 获取历史记录
type GetHistoryReq struct {
	Page           *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
	ConversationId string      `protobuf:"bytes,2,opt,name=conversationId" json:"conversationId,omitempty"`
}

func (x *GetHistoryReq) Reset() { *x = GetHistoryReq{} }

func (x *GetHistoryReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetHistoryReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetHistoryReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetHistoryReq) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

type GetHistoryResp struct {
	MessageList []*GetHistoryResp_MessageList `protobuf:"bytes,1,rep,name=messageList" json:"messageList,omitempty"`
	HasMore     bool                          `protobuf:"varint,2,opt,name=hasMore" json:"hasMore,omitempty"`
}

func (x *GetHistoryResp) Reset() { *x = GetHistoryResp{} }

func (x *GetHistoryResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetHistoryResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetHistoryResp) GetMessageList() []*GetHistoryResp_MessageList {
	if x != nil {
		return x.MessageList
	}
	return nil
}

func (x *GetHistoryResp) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

type GetHistoryResp_Ext struct {
	BotState string `protobuf:"bytes,1,opt,name=bot_state" json:"bot_state,omitempty"` // json string, 对应EventModel
}

func (x *GetHistoryResp_Ext) Reset() { *x = GetHistoryResp_Ext{} }

func (x *GetHistoryResp_Ext) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *GetHistoryResp_Ext) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetHistoryResp_Ext) GetBotState() string {
	if x != nil {
		return x.BotState
	}
	return ""
}

type GetHistoryResp_MessageList struct {
	ConversationId string              `protobuf:"bytes,1,opt,name=conversationId" json:"conversationId,omitempty"`
	SectionId      string              `protobuf:"bytes,2,opt,name=sectionId" json:"sectionId,omitempty"`
	MessageId      string              `protobuf:"bytes,3,opt,name=messageId" json:"messageId,omitempty"`
	LocalMessageId string              `protobuf:"bytes,4,opt,name=localMessageId" json:"localMessageId,omitempty"`
	Index          int32               `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	ReplyId        string              `protobuf:"bytes,6,opt,name=replyId" json:"replyId,omitempty"` // 回复id
	Status         int32               `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`  // 状态, 目前默认0
	CreateTime     int64               `protobuf:"varint,8,opt,name=createTime" json:"createTime,omitempty"`
	MessageType    int32               `protobuf:"varint,9,opt,name=messageType" json:"messageType,omitempty"`
	ContentType    int32               `protobuf:"varint,10,opt,name=contentType" json:"contentType,omitempty"`
	Content        string              `protobuf:"bytes,11,opt,name=content" json:"content,omitempty"` // json string
	Ext            *GetHistoryResp_Ext `protobuf:"bytes,12,opt,name=ext" json:"ext,omitempty"`
	Feedback       int32               `protobuf:"varint,13,opt,name=feedback" json:"feedback,omitempty"` // 反馈类型
	UserType       int32               `protobuf:"varint,14,opt,name=userType" json:"userType,omitempty"` // 用户类型, 如system, assistant, user
}

func (x *GetHistoryResp_MessageList) Reset() { *x = GetHistoryResp_MessageList{} }

func (x *GetHistoryResp_MessageList) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *GetHistoryResp_MessageList) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *GetHistoryResp_MessageList) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetHistoryResp_MessageList) GetSectionId() string {
	if x != nil {
		return x.SectionId
	}
	return ""
}

func (x *GetHistoryResp_MessageList) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GetHistoryResp_MessageList) GetLocalMessageId() string {
	if x != nil {
		return x.LocalMessageId
	}
	return ""
}

func (x *GetHistoryResp_MessageList) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetHistoryResp_MessageList) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *GetHistoryResp_MessageList) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetHistoryResp_MessageList) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetHistoryResp_MessageList) GetMessageType() int32 {
	if x != nil {
		return x.MessageType
	}
	return 0
}

func (x *GetHistoryResp_MessageList) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *GetHistoryResp_MessageList) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetHistoryResp_MessageList) GetExt() *GetHistoryResp_Ext {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *GetHistoryResp_MessageList) GetFeedback() int32 {
	if x != nil {
		return x.Feedback
	}
	return 0
}

func (x *GetHistoryResp_MessageList) GetUserType() int32 {
	if x != nil {
		return x.UserType
	}
	return 0
}

// 获取智能体列表
type ListAgentsReq struct {
	Page *basic.Page `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (x *ListAgentsReq) Reset() { *x = ListAgentsReq{} }

func (x *ListAgentsReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListAgentsReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListAgentsReq) GetPage() *basic.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListAgentsResp struct {
	Agents []*ListAgentsResp_Agent `protobuf:"bytes,1,rep,name=agents" json:"agents,omitempty"`
}

func (x *ListAgentsResp) Reset() { *x = ListAgentsResp{} }

func (x *ListAgentsResp) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListAgentsResp) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListAgentsResp) GetAgents() []*ListAgentsResp_Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

type ListAgentsResp_Agent struct {
	BotId          string `protobuf:"bytes,1,opt,name=botId" json:"botId,omitempty"`
	BotIcon        string `protobuf:"bytes,2,opt,name=botIcon" json:"botIcon,omitempty"`
	BotName        string `protobuf:"bytes,3,opt,name=botName" json:"botName,omitempty"`
	BotDescription string `protobuf:"bytes,4,opt,name=botDescription" json:"botDescription,omitempty"`
}

func (x *ListAgentsResp_Agent) Reset() { *x = ListAgentsResp_Agent{} }

func (x *ListAgentsResp_Agent) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListAgentsResp_Agent) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListAgentsResp_Agent) GetBotId() string {
	if x != nil {
		return x.BotId
	}
	return ""
}

func (x *ListAgentsResp_Agent) GetBotIcon() string {
	if x != nil {
		return x.BotIcon
	}
	return ""
}

func (x *ListAgentsResp_Agent) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

func (x *ListAgentsResp_Agent) GetBotDescription() string {
	if x != nil {
		return x.BotDescription
	}
	return ""
}

// 反馈, 包括点赞, 点踩, 删除等
type FeedbackReq struct {
	Action    string                `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	MessageId string                `protobuf:"bytes,2,opt,name=messageId" json:"messageId,omitempty"`
	Feedback  *FeedbackReq_Feedback `protobuf:"bytes,3,opt,name=feedback" json:"feedback,omitempty"`
}

func (x *FeedbackReq) Reset() { *x = FeedbackReq{} }

func (x *FeedbackReq) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FeedbackReq) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FeedbackReq) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *FeedbackReq) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *FeedbackReq) GetFeedback() *FeedbackReq_Feedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

type FeedbackReq_Feedback struct {
	Type    int32  `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (x *FeedbackReq_Feedback) Reset() { *x = FeedbackReq_Feedback{} }

func (x *FeedbackReq_Feedback) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FeedbackReq_Feedback) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FeedbackReq_Feedback) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FeedbackReq_Feedback) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}
